/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "Compression.hh"
#include "RLE.hh"
#include "RLEs.hh"
#include "wrap/gtest-wrapper.h"

#include <iostream>
#include <vector>

namespace orc {

TEST(RLEv1, simpleTest) {
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(
          std::unique_ptr<SeekableInputStream>(
              new SeekableArrayInputStream(
                  {0x61, 0xff, 0x64, 0xfb, 0x02, 0x03, 0x5, 0x7, 0xb})),
          false, RleVersion_1);
  std::vector<long> data(105);
  rle->next(data.data(), 105, nullptr);

  for (size_t i = 0; i < 100; ++i) {
    EXPECT_EQ(100 - i, data[i]) << "Output wrong at " << i;
  }
  EXPECT_EQ(2, data[100]);
  EXPECT_EQ(3, data[101]);
  EXPECT_EQ(5, data[102]);
  EXPECT_EQ(7, data[103]);
  EXPECT_EQ(11, data[104]);
};

TEST(RLEv1, signedNullLiteralTest) {
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(
          std::unique_ptr<SeekableInputStream>(
              new SeekableArrayInputStream(
                  {0xf8, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7})),
          true, RleVersion_1);
  std::vector<long> data(8);
  std::vector<char> notNull(8, 1);
  rle->next(data.data(), 8, notNull.data());

  for (size_t i = 0; i < 8; ++i) {
    EXPECT_EQ(i % 2 == 0 ? i/2 : -((i+1)/2),
              data[i]);
  }
}

TEST(RLEv1, splitHeader) {
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(
          std::unique_ptr<SeekableInputStream>(
              new SeekableArrayInputStream({0x0, 0x00, 0xdc, 0xba, 0x98, 0x76}, 4)),
  false, RleVersion_1);
  std::vector<long> data(200);
  rle->next(data.data(), 3, nullptr);

  for (size_t i = 0; i < 3; ++i) {
    EXPECT_EQ(247864668, data[i]) << "Output wrong at " << i;
  }
}

TEST(RLEv1, splitRuns) {
  SeekableInputStream* const stream =
      new SeekableArrayInputStream({0x7d, 0x01, 0xff, 0x01, 0xfb, 0x01,
                                    0x02, 0x03, 0x04, 0x05});
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(std::move(std::unique_ptr<SeekableInputStream>
                                      (stream)),
                            false, RleVersion_1);
  std::vector<long> data(200);
  for (size_t i = 0; i < 42; ++i) {
    rle->next(data.data(), 3, nullptr);
    for (size_t j = 0; j < 3; ++j) {
      EXPECT_EQ(255 + i * 3 + j, data[j])
      << "Wrong output at " << i << ", " << j;
    }
  }
  rle->next(data.data(), 3, nullptr);
  EXPECT_EQ(381, data[0]);
  EXPECT_EQ(382, data[1]);
  EXPECT_EQ(1, data[2]);
  rle->next(data.data(), 3, nullptr);
  EXPECT_EQ(2, data[0]);
  EXPECT_EQ(3, data[1]);
  EXPECT_EQ(4, data[2]);
  rle->next(data.data(), 1, nullptr);
  EXPECT_EQ(5, data[0]);
}

TEST(RLEv1, testSigned) {
  SeekableInputStream* const stream =
      new SeekableArrayInputStream({0x7f, 0xff, 0x20});
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(std::move(std::unique_ptr<SeekableInputStream>
                                     (stream)),
                       true, RleVersion_1);
  std::vector<long> data(100);
  rle->next(data.data(), data.size(), nullptr);
  for (size_t i = 0; i < data.size(); ++i) {
    EXPECT_EQ(16 - i, data[i]) << "Wrong output at " << i;
  }
  rle->next(data.data(), 30, nullptr);
  for(size_t i = 0; i < 30; ++i) {
    EXPECT_EQ(16 - 100 - static_cast<long>(i), data[i]) 
      << "Wrong output at " << (i + 100);
  }
}

TEST(RLEv1, testNull) {
  SeekableInputStream* const stream =
      new SeekableArrayInputStream({0x75, 0x02, 0x00});
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(std::move(std::unique_ptr<SeekableInputStream>
                                     (stream)),
                       true, RleVersion_1);
  std::vector<long> data(24);
  std::vector<char> notNull(24);
  for (size_t i = 0; i < notNull.size(); ++i) {
    notNull[i] = (i + 1) % 2;
  }
  for (size_t i = 0; i < 10; ++i) {
    for(size_t j = 0; j < data.size(); ++j) {
      data[j] = -1;
    }
    rle->next(data.data(), 24, notNull.data());
    for (size_t j = 0; j < 24; ++j) {
      if (notNull[j]) {
        EXPECT_EQ(i * 24 + j, data[j]);
      } else {
        EXPECT_EQ(-1, data[j]);
      }
    }
  }
}

TEST(RLEv1, testAllNulls) {
  SeekableInputStream* const stream =
      new SeekableArrayInputStream({0xf0,
                                       0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                       0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                       0x3d, 0x00, 0x12});
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(std::move(std::unique_ptr<SeekableInputStream>(stream)),
                       false, RleVersion_1);
  std::vector<long> data(16, -1);
  std::vector<char> allNull(16, 0);
  std::vector<char> noNull(16, 1);
  rle->next(data.data(), 16, allNull.data());
  for (size_t i = 0; i < data.size(); ++i) {
    EXPECT_EQ(-1, data[i]) << "Output wrong at " << i;
  }
  rle->next(data.data(), data.size(), noNull.data());
  for (size_t i = 0; i < data.size(); ++i) {
    EXPECT_EQ(i, data[i]) << "Output wrong at " << i;
    data[i] = -1;
  }
  rle->next(data.data(), data.size(), allNull.data());
  for (size_t i = 0; i < data.size(); ++i) {
    EXPECT_EQ(-1, data[i]) << "Output wrong at " << i;
  }
  for (size_t i = 0; i < 4; ++i) {
    rle->next(data.data(), data.size(), noNull.data());
    for(size_t j = 0; j < data.size(); ++j) {
      EXPECT_EQ(18, data[j]) << "Output wrong at " << i;
    }
  }
  rle->next(data.data(), data.size(), allNull.data());
}

TEST(RLEv1, skipTest) {
  // Create the RLE stream from Java's TestRunLengthIntegerEncoding.testSkips
  // for (size_t i = 0; i < 1024; ++i)
  //   out.write(i);
  // for (size_t i = 1024; i < 2048; ++i)
  //   out.write(i * 256);
  // This causes the first half to be delta encoded and the second half to
  // be literal encoded.
  SeekableInputStream* const stream =
      new SeekableArrayInputStream({
127,   1,   0, 127,   1, 132,   2, 127,   1, 136,   4, 127,   1, 140,   6, 127,
  1, 144,   8, 127,   1, 148,  10, 127,   1, 152,  12, 111,   1, 156,  14, 128,
128, 128,  32, 128, 132,  32, 128, 136,  32, 128, 140,  32, 128, 144,  32, 128,
148,  32, 128, 152,  32, 128, 156,  32, 128, 160,  32, 128, 164,  32, 128, 168,
 32, 128, 172,  32, 128, 176,  32, 128, 180,  32, 128, 184,  32, 128, 188,  32,
128, 192,  32, 128, 196,  32, 128, 200,  32, 128, 204,  32, 128, 208,  32, 128,
212,  32, 128, 216,  32, 128, 220,  32, 128, 224,  32, 128, 228,  32, 128, 232,
 32, 128, 236,  32, 128, 240,  32, 128, 244,  32, 128, 248,  32, 128, 252,  32,
128, 128,  33, 128, 132,  33, 128, 136,  33, 128, 140,  33, 128, 144,  33, 128,
148,  33, 128, 152,  33, 128, 156,  33, 128, 160,  33, 128, 164,  33, 128, 168,
 33, 128, 172,  33, 128, 176,  33, 128, 180,  33, 128, 184,  33, 128, 188,  33,
128, 192,  33, 128, 196,  33, 128, 200,  33, 128, 204,  33, 128, 208,  33, 128,
212,  33, 128, 216,  33, 128, 220,  33, 128, 224,  33, 128, 228,  33, 128, 232,
 33, 128, 236,  33, 128, 240,  33, 128, 244,  33, 128, 248,  33, 128, 252,  33,
128, 128,  34, 128, 132,  34, 128, 136,  34, 128, 140,  34, 128, 144,  34, 128,
148,  34, 128, 152,  34, 128, 156,  34, 128, 160,  34, 128, 164,  34, 128, 168,
 34, 128, 172,  34, 128, 176,  34, 128, 180,  34, 128, 184,  34, 128, 188,  34,
128, 192,  34, 128, 196,  34, 128, 200,  34, 128, 204,  34, 128, 208,  34, 128,
212,  34, 128, 216,  34, 128, 220,  34, 128, 224,  34, 128, 228,  34, 128, 232,
 34, 128, 236,  34, 128, 240,  34, 128, 244,  34, 128, 248,  34, 128, 252,  34,
128, 128,  35, 128, 132,  35, 128, 136,  35, 128, 140,  35, 128, 144,  35, 128,
148,  35, 128, 152,  35, 128, 156,  35, 128, 160,  35, 128, 164,  35, 128, 168,
 35, 128, 172,  35, 128, 176,  35, 128, 180,  35, 128, 184,  35, 128, 188,  35,
128, 192,  35, 128, 196,  35, 128, 200,  35, 128, 204,  35, 128, 208,  35, 128,
212,  35, 128, 216,  35, 128, 220,  35, 128, 224,  35, 128, 228,  35, 128, 232,
 35, 128, 236,  35, 128, 240,  35, 128, 244,  35, 128, 248,  35, 128, 252,  35,
128, 128, 128,  36, 128, 132,  36, 128, 136,  36, 128, 140,  36, 128, 144,  36,
128, 148,  36, 128, 152,  36, 128, 156,  36, 128, 160,  36, 128, 164,  36, 128,
168,  36, 128, 172,  36, 128, 176,  36, 128, 180,  36, 128, 184,  36, 128, 188,
 36, 128, 192,  36, 128, 196,  36, 128, 200,  36, 128, 204,  36, 128, 208,  36,
128, 212,  36, 128, 216,  36, 128, 220,  36, 128, 224,  36, 128, 228,  36, 128,
232,  36, 128, 236,  36, 128, 240,  36, 128, 244,  36, 128, 248,  36, 128, 252,
 36, 128, 128,  37, 128, 132,  37, 128, 136,  37, 128, 140,  37, 128, 144,  37,
128, 148,  37, 128, 152,  37, 128, 156,  37, 128, 160,  37, 128, 164,  37, 128,
168,  37, 128, 172,  37, 128, 176,  37, 128, 180,  37, 128, 184,  37, 128, 188,
 37, 128, 192,  37, 128, 196,  37, 128, 200,  37, 128, 204,  37, 128, 208,  37,
128, 212,  37, 128, 216,  37, 128, 220,  37, 128, 224,  37, 128, 228,  37, 128,
232,  37, 128, 236,  37, 128, 240,  37, 128, 244,  37, 128, 248,  37, 128, 252,
 37, 128, 128,  38, 128, 132,  38, 128, 136,  38, 128, 140,  38, 128, 144,  38,
128, 148,  38, 128, 152,  38, 128, 156,  38, 128, 160,  38, 128, 164,  38, 128,
168,  38, 128, 172,  38, 128, 176,  38, 128, 180,  38, 128, 184,  38, 128, 188,
 38, 128, 192,  38, 128, 196,  38, 128, 200,  38, 128, 204,  38, 128, 208,  38,
128, 212,  38, 128, 216,  38, 128, 220,  38, 128, 224,  38, 128, 228,  38, 128,
232,  38, 128, 236,  38, 128, 240,  38, 128, 244,  38, 128, 248,  38, 128, 252,
 38, 128, 128,  39, 128, 132,  39, 128, 136,  39, 128, 140,  39, 128, 144,  39,
128, 148,  39, 128, 152,  39, 128, 156,  39, 128, 160,  39, 128, 164,  39, 128,
168,  39, 128, 172,  39, 128, 176,  39, 128, 180,  39, 128, 184,  39, 128, 188,
 39, 128, 192,  39, 128, 196,  39, 128, 200,  39, 128, 204,  39, 128, 208,  39,
128, 212,  39, 128, 216,  39, 128, 220,  39, 128, 224,  39, 128, 228,  39, 128,
232,  39, 128, 236,  39, 128, 240,  39, 128, 244,  39, 128, 248,  39, 128, 252,
 39, 128, 128, 128,  40, 128, 132,  40, 128, 136,  40, 128, 140,  40, 128, 144,
 40, 128, 148,  40, 128, 152,  40, 128, 156,  40, 128, 160,  40, 128, 164,  40,
128, 168,  40, 128, 172,  40, 128, 176,  40, 128, 180,  40, 128, 184,  40, 128,
188,  40, 128, 192,  40, 128, 196,  40, 128, 200,  40, 128, 204,  40, 128, 208,
 40, 128, 212,  40, 128, 216,  40, 128, 220,  40, 128, 224,  40, 128, 228,  40,
128, 232,  40, 128, 236,  40, 128, 240,  40, 128, 244,  40, 128, 248,  40, 128,
252,  40, 128, 128,  41, 128, 132,  41, 128, 136,  41, 128, 140,  41, 128, 144,
 41, 128, 148,  41, 128, 152,  41, 128, 156,  41, 128, 160,  41, 128, 164,  41,
128, 168,  41, 128, 172,  41, 128, 176,  41, 128, 180,  41, 128, 184,  41, 128,
188,  41, 128, 192,  41, 128, 196,  41, 128, 200,  41, 128, 204,  41, 128, 208,
 41, 128, 212,  41, 128, 216,  41, 128, 220,  41, 128, 224,  41, 128, 228,  41,
128, 232,  41, 128, 236,  41, 128, 240,  41, 128, 244,  41, 128, 248,  41, 128,
252,  41, 128, 128,  42, 128, 132,  42, 128, 136,  42, 128, 140,  42, 128, 144,
 42, 128, 148,  42, 128, 152,  42, 128, 156,  42, 128, 160,  42, 128, 164,  42,
128, 168,  42, 128, 172,  42, 128, 176,  42, 128, 180,  42, 128, 184,  42, 128,
188,  42, 128, 192,  42, 128, 196,  42, 128, 200,  42, 128, 204,  42, 128, 208,
 42, 128, 212,  42, 128, 216,  42, 128, 220,  42, 128, 224,  42, 128, 228,  42,
128, 232,  42, 128, 236,  42, 128, 240,  42, 128, 244,  42, 128, 248,  42, 128,
252,  42, 128, 128,  43, 128, 132,  43, 128, 136,  43, 128, 140,  43, 128, 144,
 43, 128, 148,  43, 128, 152,  43, 128, 156,  43, 128, 160,  43, 128, 164,  43,
128, 168,  43, 128, 172,  43, 128, 176,  43, 128, 180,  43, 128, 184,  43, 128,
188,  43, 128, 192,  43, 128, 196,  43, 128, 200,  43, 128, 204,  43, 128, 208,
 43, 128, 212,  43, 128, 216,  43, 128, 220,  43, 128, 224,  43, 128, 228,  43,
128, 232,  43, 128, 236,  43, 128, 240,  43, 128, 244,  43, 128, 248,  43, 128,
252,  43, 128, 128, 128,  44, 128, 132,  44, 128, 136,  44, 128, 140,  44, 128,
144,  44, 128, 148,  44, 128, 152,  44, 128, 156,  44, 128, 160,  44, 128, 164,
 44, 128, 168,  44, 128, 172,  44, 128, 176,  44, 128, 180,  44, 128, 184,  44,
128, 188,  44, 128, 192,  44, 128, 196,  44, 128, 200,  44, 128, 204,  44, 128,
208,  44, 128, 212,  44, 128, 216,  44, 128, 220,  44, 128, 224,  44, 128, 228,
 44, 128, 232,  44, 128, 236,  44, 128, 240,  44, 128, 244,  44, 128, 248,  44,
128, 252,  44, 128, 128,  45, 128, 132,  45, 128, 136,  45, 128, 140,  45, 128,
144,  45, 128, 148,  45, 128, 152,  45, 128, 156,  45, 128, 160,  45, 128, 164,
 45, 128, 168,  45, 128, 172,  45, 128, 176,  45, 128, 180,  45, 128, 184,  45,
128, 188,  45, 128, 192,  45, 128, 196,  45, 128, 200,  45, 128, 204,  45, 128,
208,  45, 128, 212,  45, 128, 216,  45, 128, 220,  45, 128, 224,  45, 128, 228,
 45, 128, 232,  45, 128, 236,  45, 128, 240,  45, 128, 244,  45, 128, 248,  45,
128, 252,  45, 128, 128,  46, 128, 132,  46, 128, 136,  46, 128, 140,  46, 128,
144,  46, 128, 148,  46, 128, 152,  46, 128, 156,  46, 128, 160,  46, 128, 164,
 46, 128, 168,  46, 128, 172,  46, 128, 176,  46, 128, 180,  46, 128, 184,  46,
128, 188,  46, 128, 192,  46, 128, 196,  46, 128, 200,  46, 128, 204,  46, 128,
208,  46, 128, 212,  46, 128, 216,  46, 128, 220,  46, 128, 224,  46, 128, 228,
 46, 128, 232,  46, 128, 236,  46, 128, 240,  46, 128, 244,  46, 128, 248,  46,
128, 252,  46, 128, 128,  47, 128, 132,  47, 128, 136,  47, 128, 140,  47, 128,
144,  47, 128, 148,  47, 128, 152,  47, 128, 156,  47, 128, 160,  47, 128, 164,
 47, 128, 168,  47, 128, 172,  47, 128, 176,  47, 128, 180,  47, 128, 184,  47,
128, 188,  47, 128, 192,  47, 128, 196,  47, 128, 200,  47, 128, 204,  47, 128,
208,  47, 128, 212,  47, 128, 216,  47, 128, 220,  47, 128, 224,  47, 128, 228,
 47, 128, 232,  47, 128, 236,  47, 128, 240,  47, 128, 244,  47, 128, 248,  47,
128, 252,  47, 128, 128, 128,  48, 128, 132,  48, 128, 136,  48, 128, 140,  48,
128, 144,  48, 128, 148,  48, 128, 152,  48, 128, 156,  48, 128, 160,  48, 128,
164,  48, 128, 168,  48, 128, 172,  48, 128, 176,  48, 128, 180,  48, 128, 184,
 48, 128, 188,  48, 128, 192,  48, 128, 196,  48, 128, 200,  48, 128, 204,  48,
128, 208,  48, 128, 212,  48, 128, 216,  48, 128, 220,  48, 128, 224,  48, 128,
228,  48, 128, 232,  48, 128, 236,  48, 128, 240,  48, 128, 244,  48, 128, 248,
 48, 128, 252,  48, 128, 128,  49, 128, 132,  49, 128, 136,  49, 128, 140,  49,
128, 144,  49, 128, 148,  49, 128, 152,  49, 128, 156,  49, 128, 160,  49, 128,
164,  49, 128, 168,  49, 128, 172,  49, 128, 176,  49, 128, 180,  49, 128, 184,
 49, 128, 188,  49, 128, 192,  49, 128, 196,  49, 128, 200,  49, 128, 204,  49,
128, 208,  49, 128, 212,  49, 128, 216,  49, 128, 220,  49, 128, 224,  49, 128,
228,  49, 128, 232,  49, 128, 236,  49, 128, 240,  49, 128, 244,  49, 128, 248,
 49, 128, 252,  49, 128, 128,  50, 128, 132,  50, 128, 136,  50, 128, 140,  50,
128, 144,  50, 128, 148,  50, 128, 152,  50, 128, 156,  50, 128, 160,  50, 128,
164,  50, 128, 168,  50, 128, 172,  50, 128, 176,  50, 128, 180,  50, 128, 184,
 50, 128, 188,  50, 128, 192,  50, 128, 196,  50, 128, 200,  50, 128, 204,  50,
128, 208,  50, 128, 212,  50, 128, 216,  50, 128, 220,  50, 128, 224,  50, 128,
228,  50, 128, 232,  50, 128, 236,  50, 128, 240,  50, 128, 244,  50, 128, 248,
 50, 128, 252,  50, 128, 128,  51, 128, 132,  51, 128, 136,  51, 128, 140,  51,
128, 144,  51, 128, 148,  51, 128, 152,  51, 128, 156,  51, 128, 160,  51, 128,
164,  51, 128, 168,  51, 128, 172,  51, 128, 176,  51, 128, 180,  51, 128, 184,
 51, 128, 188,  51, 128, 192,  51, 128, 196,  51, 128, 200,  51, 128, 204,  51,
128, 208,  51, 128, 212,  51, 128, 216,  51, 128, 220,  51, 128, 224,  51, 128,
228,  51, 128, 232,  51, 128, 236,  51, 128, 240,  51, 128, 244,  51, 128, 248,
 51, 128, 252,  51, 128, 128, 128,  52, 128, 132,  52, 128, 136,  52, 128, 140,
 52, 128, 144,  52, 128, 148,  52, 128, 152,  52, 128, 156,  52, 128, 160,  52,
128, 164,  52, 128, 168,  52, 128, 172,  52, 128, 176,  52, 128, 180,  52, 128,
184,  52, 128, 188,  52, 128, 192,  52, 128, 196,  52, 128, 200,  52, 128, 204,
 52, 128, 208,  52, 128, 212,  52, 128, 216,  52, 128, 220,  52, 128, 224,  52,
128, 228,  52, 128, 232,  52, 128, 236,  52, 128, 240,  52, 128, 244,  52, 128,
248,  52, 128, 252,  52, 128, 128,  53, 128, 132,  53, 128, 136,  53, 128, 140,
 53, 128, 144,  53, 128, 148,  53, 128, 152,  53, 128, 156,  53, 128, 160,  53,
128, 164,  53, 128, 168,  53, 128, 172,  53, 128, 176,  53, 128, 180,  53, 128,
184,  53, 128, 188,  53, 128, 192,  53, 128, 196,  53, 128, 200,  53, 128, 204,
 53, 128, 208,  53, 128, 212,  53, 128, 216,  53, 128, 220,  53, 128, 224,  53,
128, 228,  53, 128, 232,  53, 128, 236,  53, 128, 240,  53, 128, 244,  53, 128,
248,  53, 128, 252,  53, 128, 128,  54, 128, 132,  54, 128, 136,  54, 128, 140,
 54, 128, 144,  54, 128, 148,  54, 128, 152,  54, 128, 156,  54, 128, 160,  54,
128, 164,  54, 128, 168,  54, 128, 172,  54, 128, 176,  54, 128, 180,  54, 128,
184,  54, 128, 188,  54, 128, 192,  54, 128, 196,  54, 128, 200,  54, 128, 204,
 54, 128, 208,  54, 128, 212,  54, 128, 216,  54, 128, 220,  54, 128, 224,  54,
128, 228,  54, 128, 232,  54, 128, 236,  54, 128, 240,  54, 128, 244,  54, 128,
248,  54, 128, 252,  54, 128, 128,  55, 128, 132,  55, 128, 136,  55, 128, 140,
 55, 128, 144,  55, 128, 148,  55, 128, 152,  55, 128, 156,  55, 128, 160,  55,
128, 164,  55, 128, 168,  55, 128, 172,  55, 128, 176,  55, 128, 180,  55, 128,
184,  55, 128, 188,  55, 128, 192,  55, 128, 196,  55, 128, 200,  55, 128, 204,
 55, 128, 208,  55, 128, 212,  55, 128, 216,  55, 128, 220,  55, 128, 224,  55,
128, 228,  55, 128, 232,  55, 128, 236,  55, 128, 240,  55, 128, 244,  55, 128,
248,  55, 128, 252,  55, 128, 128, 128,  56, 128, 132,  56, 128, 136,  56, 128,
140,  56, 128, 144,  56, 128, 148,  56, 128, 152,  56, 128, 156,  56, 128, 160,
 56, 128, 164,  56, 128, 168,  56, 128, 172,  56, 128, 176,  56, 128, 180,  56,
128, 184,  56, 128, 188,  56, 128, 192,  56, 128, 196,  56, 128, 200,  56, 128,
204,  56, 128, 208,  56, 128, 212,  56, 128, 216,  56, 128, 220,  56, 128, 224,
 56, 128, 228,  56, 128, 232,  56, 128, 236,  56, 128, 240,  56, 128, 244,  56,
128, 248,  56, 128, 252,  56, 128, 128,  57, 128, 132,  57, 128, 136,  57, 128,
140,  57, 128, 144,  57, 128, 148,  57, 128, 152,  57, 128, 156,  57, 128, 160,
 57, 128, 164,  57, 128, 168,  57, 128, 172,  57, 128, 176,  57, 128, 180,  57,
128, 184,  57, 128, 188,  57, 128, 192,  57, 128, 196,  57, 128, 200,  57, 128,
204,  57, 128, 208,  57, 128, 212,  57, 128, 216,  57, 128, 220,  57, 128, 224,
 57, 128, 228,  57, 128, 232,  57, 128, 236,  57, 128, 240,  57, 128, 244,  57,
128, 248,  57, 128, 252,  57, 128, 128,  58, 128, 132,  58, 128, 136,  58, 128,
140,  58, 128, 144,  58, 128, 148,  58, 128, 152,  58, 128, 156,  58, 128, 160,
 58, 128, 164,  58, 128, 168,  58, 128, 172,  58, 128, 176,  58, 128, 180,  58,
128, 184,  58, 128, 188,  58, 128, 192,  58, 128, 196,  58, 128, 200,  58, 128,
204,  58, 128, 208,  58, 128, 212,  58, 128, 216,  58, 128, 220,  58, 128, 224,
 58, 128, 228,  58, 128, 232,  58, 128, 236,  58, 128, 240,  58, 128, 244,  58,
128, 248,  58, 128, 252,  58, 128, 128,  59, 128, 132,  59, 128, 136,  59, 128,
140,  59, 128, 144,  59, 128, 148,  59, 128, 152,  59, 128, 156,  59, 128, 160,
 59, 128, 164,  59, 128, 168,  59, 128, 172,  59, 128, 176,  59, 128, 180,  59,
128, 184,  59, 128, 188,  59, 128, 192,  59, 128, 196,  59, 128, 200,  59, 128,
204,  59, 128, 208,  59, 128, 212,  59, 128, 216,  59, 128, 220,  59, 128, 224,
 59, 128, 228,  59, 128, 232,  59, 128, 236,  59, 128, 240,  59, 128, 244,  59,
128, 248,  59, 128, 252,  59, 128, 128, 128,  60, 128, 132,  60, 128, 136,  60,
128, 140,  60, 128, 144,  60, 128, 148,  60, 128, 152,  60, 128, 156,  60, 128,
160,  60, 128, 164,  60, 128, 168,  60, 128, 172,  60, 128, 176,  60, 128, 180,
 60, 128, 184,  60, 128, 188,  60, 128, 192,  60, 128, 196,  60, 128, 200,  60,
128, 204,  60, 128, 208,  60, 128, 212,  60, 128, 216,  60, 128, 220,  60, 128,
224,  60, 128, 228,  60, 128, 232,  60, 128, 236,  60, 128, 240,  60, 128, 244,
 60, 128, 248,  60, 128, 252,  60, 128, 128,  61, 128, 132,  61, 128, 136,  61,
128, 140,  61, 128, 144,  61, 128, 148,  61, 128, 152,  61, 128, 156,  61, 128,
160,  61, 128, 164,  61, 128, 168,  61, 128, 172,  61, 128, 176,  61, 128, 180,
 61, 128, 184,  61, 128, 188,  61, 128, 192,  61, 128, 196,  61, 128, 200,  61,
128, 204,  61, 128, 208,  61, 128, 212,  61, 128, 216,  61, 128, 220,  61, 128,
224,  61, 128, 228,  61, 128, 232,  61, 128, 236,  61, 128, 240,  61, 128, 244,
 61, 128, 248,  61, 128, 252,  61, 128, 128,  62, 128, 132,  62, 128, 136,  62,
128, 140,  62, 128, 144,  62, 128, 148,  62, 128, 152,  62, 128, 156,  62, 128,
160,  62, 128, 164,  62, 128, 168,  62, 128, 172,  62, 128, 176,  62, 128, 180,
 62, 128, 184,  62, 128, 188,  62, 128, 192,  62, 128, 196,  62, 128, 200,  62,
128, 204,  62, 128, 208,  62, 128, 212,  62, 128, 216,  62, 128, 220,  62, 128,
224,  62, 128, 228,  62, 128, 232,  62, 128, 236,  62, 128, 240,  62, 128, 244,
 62, 128, 248,  62, 128, 252,  62, 128, 128,  63, 128, 132,  63, 128, 136,  63,
128, 140,  63, 128, 144,  63, 128, 148,  63, 128, 152,  63, 128, 156,  63, 128,
160,  63, 128, 164,  63, 128, 168,  63, 128, 172,  63, 128, 176,  63, 128, 180,
 63, 128, 184,  63, 128, 188,  63, 128, 192,  63, 128, 196,  63, 128, 200,  63,
128, 204,  63, 128, 208,  63, 128, 212,  63, 128, 216,  63, 128, 220,  63, 128,
224,  63, 128, 228,  63, 128, 232,  63, 128, 236,  63, 128, 240,  63, 128, 244,
 63, 128, 248,  63, 128, 252,  63});
  std::unique_ptr<RleDecoder> rle =
      createRleDecoder(std::move(std::unique_ptr<SeekableInputStream>(stream)),
                       true, RleVersion_1);
  std::vector<long> data(1);
  for (size_t i = 0; i < 2048; i += 10) {
    rle->next(data.data(), 1, nullptr);
    if (i < 1024) {
      EXPECT_EQ(i, data[0]) << "Wrong output at " << i;
    } else {
      EXPECT_EQ(256 * i, data[0]) << "Wrong output at " << i;
    }
    if (i < 2038) {
      rle->skip(9);
    }
    rle->skip(0);
  }
}

}  // namespace orc
